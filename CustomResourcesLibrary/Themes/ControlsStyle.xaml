<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:converter="clr-namespace:GeoVis.Plugin.CustomResourcesLibrary.Converters">
    <!--Converters-->
    <converter:VisibilityToNullableBooleanConverter x:Key="VisibilityToNullableBooleanConverter"></converter:VisibilityToNullableBooleanConverter>

    <!--Control Colors-->

    <!--Button-->

    <Style TargetType="{x:Type Button}">
        <Setter Property="Width" Value="70"></Setter>
        <Setter Property="Height" Value="28"></Setter>
        <Setter Property="HorizontalContentAlignment" Value="Center"></Setter>
        <Setter Property="VerticalContentAlignment" Value="Center"></Setter>
        <Setter Property="Margin" Value="10,0,0,0"></Setter>
        <Setter Property="FontFamily" Value="微软雅黑"></Setter>
        <Setter Property="FontSize" Value="18"></Setter>
        <Setter Property="Foreground" Value="White"></Setter>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Image x:Name="backImage" Source="pack://application:,,,/CustomResourcesLibrary;component/Resources/按钮小.png" Stretch="Fill"></Image>
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="backImage" Property="Source" Value="pack://application:,,,/CustomResourcesLibrary;component/Resources/按钮小-悬浮.png"></Setter>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="backImage" Property="Source" Value="pack://application:,,,/CustomResourcesLibrary;component/Resources/按钮小-选择.png"></Setter>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="backImage" Property="Source" Value="pack://application:,,,/CustomResourcesLibrary;component/Resources/按钮小-禁用.png"></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="BigButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Width" Value="165"></Setter>
        <Setter Property="Height" Value="69"></Setter>
        <Setter Property="HorizontalContentAlignment" Value="Center"></Setter>
        <Setter Property="VerticalContentAlignment" Value="Center"></Setter>
        <Setter Property="FontFamily" Value="Arial,pack://application:,,,/CustomResourcesLibrary;component/Fonts/#微软简老宋"></Setter>
        <Setter Property="FontSize" Value="20"></Setter>
        <Setter Property="Foreground" Value="#00FFFF"></Setter>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Grid>
                        <Image x:Name="backImage" Source="pack://application:,,,/CustomResourcesLibrary;component/Resources/按钮大.png" Stretch="Fill"></Image>
                        <ContentPresenter x:Name="btnContentPresenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                            <ContentPresenter.Effect>
                                <DropShadowEffect Color="#0099FF" Opacity="0.65" BlurRadius="12" ShadowDepth="0"/>
                            </ContentPresenter.Effect>
                        </ContentPresenter>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="backImage" Property="Source" Value="pack://application:,,,/CustomResourcesLibrary;component/Resources/按钮大-悬浮.png"></Setter>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Foreground" Value="#FFAC00"></Setter>
                            <Setter TargetName="backImage" Property="Source" Value="pack://application:,,,/CustomResourcesLibrary;component/Resources/按钮大-选择.png"></Setter>
                            <Setter TargetName="btnContentPresenter" Property="Effect">
                                <Setter.Value>
                                    <DropShadowEffect Color="#C66300" Opacity="0.65" BlurRadius="12" ShadowDepth="0"></DropShadowEffect>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="White"></Setter>
                            <Setter TargetName="btnContentPresenter" Property="Effect" Value="{x:Null}"></Setter>
                            <Setter TargetName="backImage" Property="Source" Value="pack://application:,,,/CustomResourcesLibrary;component/Resources/按钮大-禁用.png"></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--CheckBox-->
    <Style TargetType="{x:Type CheckBox}">
        <Setter Property="Foreground" Value="White"></Setter>
        <Setter Property="FontFamily" Value="微软雅黑"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <BulletDecorator>
                        <BulletDecorator.Bullet>
                            <Border x:Name="Border" Width="13" Height="13" CornerRadius="0" Background="#FF104965" BorderThickness="1" BorderBrush="#FF99E5FF">
                                <Grid>
                                    <Path x:Name="CheckMark" Visibility="Collapsed" Width="7" Height="7" Stroke="White" SnapsToDevicePixels="False" StrokeThickness="1.5" Data="M 1 3 L 3 6 L 6 1"></Path>
                                </Grid>
                            </Border>
                        </BulletDecorator.Bullet>
                        <ContentPresenter Content="{TemplateBinding Content}" VerticalAlignment="Center" Margin="5,0,0,0"></ContentPresenter>
                    </BulletDecorator>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="CheckMark" Property="Visibility" Value="Visible"></Setter>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="#FF994D00"></Setter>
                            <Setter TargetName="Border" Property="BorderBrush" Value="#FFFFB973"></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="BigCheckBoxStyle" TargetType="{x:Type CheckBox}">
        <Setter Property="Foreground" Value="White"></Setter>
        <Setter Property="FontFamily" Value="微软雅黑"></Setter>
        <Setter Property="FontSize" Value="16"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <BulletDecorator>
                        <BulletDecorator.Bullet>
                            <Border x:Name="Border" Width="20" Height="20" CornerRadius="0" Background="#FF104965" BorderThickness="1" BorderBrush="#FF99E5FF">
                                <Grid>
                                    <Path x:Name="CheckMark" Visibility="Collapsed" Width="14" Height="14" Stroke="White" SnapsToDevicePixels="False" StrokeThickness="2" Data="M 2 7 L 7 12 L 12 2"></Path>
                                </Grid>
                            </Border>
                        </BulletDecorator.Bullet>
                        <ContentPresenter Content="{TemplateBinding Content}" VerticalAlignment="Center" Margin="10,0,0,0"></ContentPresenter>
                    </BulletDecorator>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="CheckMark" Property="Visibility" Value="Visible"></Setter>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="#FF994D00"></Setter>
                            <Setter TargetName="Border" Property="BorderBrush" Value="#FFFFB973"></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="EyeCheckBoxStyle" TargetType="{x:Type CheckBox}">
        <Setter Property="Foreground" Value="White"></Setter>
        <Setter Property="FontFamily" Value="微软雅黑"></Setter>
        <Setter Property="FontSize" Value="16"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <BulletDecorator>
                        <BulletDecorator.Bullet>
                            <Border x:Name="Border" Width="20" Height="20" CornerRadius="0" Background="#FF104965" BorderThickness="1" BorderBrush="#FF99E5FF">
                                <Grid>
                                    <TextBlock x:Name="CheckMark" FontFamily="pack://application:,,,/CustomResourcesLibrary;component\Fonts\#FontAwesome"
                                               Foreground="White" FontSize="14" Text="&#xf06e;" Visibility="Collapsed" Width="14" Height="14" VerticalAlignment="Center" HorizontalAlignment="Center"></TextBlock>
                                </Grid>
                            </Border>
                        </BulletDecorator.Bullet>
                        <ContentPresenter Content="{TemplateBinding Content}" VerticalAlignment="Center" Margin="10,0,0,0"></ContentPresenter>
                    </BulletDecorator>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="CheckMark" Property="Visibility" Value="Visible"></Setter>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="#FF994D00"></Setter>
                            <Setter TargetName="Border" Property="BorderBrush" Value="#FFFFB973"></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style x:Key="ButtonCheckBoxStyle" TargetType="{x:Type CheckBox}">
        <Setter Property="Width" Value="70"></Setter>
        <Setter Property="Height" Value="28"></Setter>
        <Setter Property="HorizontalContentAlignment" Value="Center"></Setter>
        <Setter Property="VerticalContentAlignment" Value="Center"></Setter>
        <Setter Property="Margin" Value="10,0,0,0"></Setter>
        <Setter Property="FontFamily" Value="微软雅黑"></Setter>
        <Setter Property="FontSize" Value="18"></Setter>
        <Setter Property="Foreground" Value="White"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Grid>
                        <Image x:Name="backImage" Source="pack://application:,,,/CustomResourcesLibrary;component/Resources/按钮小.png" Stretch="Fill"></Image>
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="backImage" Property="Source" Value="pack://application:,,,/CustomResourcesLibrary;component/Resources/按钮小-悬浮.png"></Setter>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="backImage" Property="Source" Value="pack://application:,,,/CustomResourcesLibrary;component/Resources/按钮小-选择.png"></Setter>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="backImage" Property="Source" Value="pack://application:,,,/CustomResourcesLibrary;component/Resources/按钮小-选择.png"></Setter>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="backImage" Property="Source" Value="pack://application:,,,/CustomResourcesLibrary;component/Resources/按钮小-禁用.png"></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!--ComboBox-->
    <ControlTemplate x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
        <Border x:Name="ComboBoxBorder" Width="30" Height="30">
            <Border.Background>
                <ImageBrush ImageSource="pack://application:,,,/CustomResourcesLibrary;component/Resources/功能条-按钮背景.png" Stretch="Fill"></ImageBrush>
            </Border.Background>
            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Setter TargetName="ComboBoxBorder" Property="Background">
                    <Setter.Value>
                        <ImageBrush ImageSource="pack://application:,,,/CustomResourcesLibrary;component/Resources/功能条-按钮背景-选择.png" Stretch="Fill"></ImageBrush>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter TargetName="ComboBoxBorder" Property="Background">
                    <Setter.Value>
                        <ImageBrush ImageSource="pack://application:,,,/CustomResourcesLibrary;component/Resources/功能条-按钮背景-选择.png" Stretch="Fill"></ImageBrush>
                    </Setter.Value>
                </Setter>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="ComboBoxBorder" Property="Background">
                    <Setter.Value>
                        <ImageBrush ImageSource="pack://application:,,,/CustomResourcesLibrary;component/Resources/功能条-按钮背景-悬浮.png" Stretch="Fill"></ImageBrush>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style TargetType="{x:Type ComboBox}">
        <Setter Property="SnapsToDevicePixels" Value="True"></Setter>
        <Setter Property="OverridesDefaultStyle" Value="True"></Setter>
        <Setter Property="FontFamily" Value="微软雅黑"></Setter>
        <Setter Property="FontSize" Value="16"></Setter>
        <Setter Property="Background" Value="White"></Setter>
        <Setter Property="BorderBrush" Value="Transparent"></Setter>
        <Setter Property="BorderThickness" Value="0"></Setter>
        <Setter Property="Height" Value="30"></Setter>
        <Setter Property="MaxDropDownHeight" Value="300"></Setter>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Auto"></Setter>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"></Setter>
        <Setter Property="ScrollViewer.CanContentScroll" Value="True"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="1*"></ColumnDefinition>
                            <ColumnDefinition Width="30"></ColumnDefinition>
                        </Grid.ColumnDefinitions>
                        <Border Height="{TemplateBinding Height}" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}">
                            <ContentPresenter x:Name="ContentSite" IsHitTestVisible="False" Content="{TemplateBinding SelectionBoxItem}"
                                              ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                              Margin="3" VerticalAlignment="Stretch" HorizontalAlignment="Left">
                            </ContentPresenter>
                        </Border>
                        <TextBox x:Name="PART_EditableTextBox" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="3" Focusable="True"
                                 Visibility="Hidden" IsReadOnly="{TemplateBinding IsReadOnly}"></TextBox>
                        <Popup x:Name="Popup" Placement="Bottom" IsOpen="{TemplateBinding IsDropDownOpen}" AllowsTransparency="True"
                               Focusable="False" PopupAnimation="Slide" Width="{TemplateBinding Width}">
                            <Grid x:Name="DropDown" SnapsToDevicePixels="True" MaxHeight="{TemplateBinding MaxDropDownHeight}">
                                <Border Background="{TemplateBinding Background}">
                                    <ScrollViewer Margin="4,6,4,6" SnapsToDevicePixels="True">
                                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Contained" />
                                    </ScrollViewer>
                                </Border>
                            </Grid>
                        </Popup>
                        <ToggleButton Grid.Column="1" x:Name="ToggleButton" Focusable="False" ClickMode="Press" VerticalAlignment="Top" Template="{StaticResource ComboBoxToggleButton}"
                                      IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                            <Path Width="10" Height="8" Data="M 0,0 L 1,0 L 0.5,1 Z" Stretch="Fill" Fill="White" Stroke="Transparent" StrokeThickness="0"></Path>
                        </ToggleButton>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--DataGrid-->
    <Style TargetType="{x:Type Button}" x:Key="{ComponentResourceKey ResourceId=DataGridSelectAllButtonStyle,TypeInTargetAssembly={x:Type DataGrid}}">
        <Setter Property="IsEnabled" Value="False"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="#63C0DF" BorderThickness="0,0,1,0" BorderBrush="Black"></Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--Style and template for the DataGridCell.-->
    <Style TargetType="{x:Type DataGridCell}">
        <Setter Property="Foreground" Value="White"></Setter>
        <Setter Property="FontFamily" Value="微软雅黑"></Setter>
        <Setter Property="FontSize" Value="16"></Setter>
        <Setter Property="Padding" Value="5,5,0,5"></Setter>
        <Setter Property="Background" Value="Transparent"></Setter>
        <Setter Property="BorderBrush" Value="Transparent"></Setter>
        <Setter Property="BorderThickness" Value="0"></Setter>
        <Setter Property="SnapsToDevicePixels" Value="True"></Setter>
        <Setter Property="HorizontalContentAlignment" Value="Left"></Setter>
        <Setter Property="VerticalContentAlignment" Value="Center"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridCell}">
                    <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" 
                                Background="{TemplateBinding Background}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                        <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Margin="{TemplateBinding Padding}"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="LightGray"></Setter>
                <Setter Property="Opacity" Value="0.6"></Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!--Style and template for the DataGridRow.-->
    <Style TargetType="{x:Type DataGridRow}">
        <Setter Property="HorizontalContentAlignment" Value="Center"></Setter>
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="BorderBrush" Value="Transparent"></Setter>
        <Setter Property="BorderThickness" Value="0"></Setter>
        <Setter Property="Validation.ErrorTemplate" Value="{x:Null}" />
        <Setter Property="ValidationErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <TextBlock Foreground="Red" Margin="2,0,0,0" Text="!" VerticalAlignment="Center" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridRow}">
                    <Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="Normal_AlternatingRow"/>
                                <VisualState x:Name="Normal_Selected">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="DGR_Border" Storyboard.TargetProperty="(Panel.Background).Color">
                                            <EasingColorKeyFrame KeyTime="0" Value="#FFBF00" />
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>

                                <VisualState x:Name="Unfocused_Selected">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="DGR_Border" Storyboard.TargetProperty="(Panel.Background).Color">
                                            <EasingColorKeyFrame KeyTime="0" Value="#FFBF00" />
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="DGR_Rectangle" Storyboard.TargetProperty="(Shape.Stroke).Color">
                                            <EasingColorKeyFrame KeyTime="0" Value="Silver" />
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="DGR_Border" Storyboard.TargetProperty="(Panel.Background).Color">
                                            <EasingColorKeyFrame KeyTime="0" Value="#FFBF00" />
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="MouseOver_Selected">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="DGR_Rectangle" Storyboard.TargetProperty="(Shape.Stroke).Color">
                                            <EasingColorKeyFrame KeyTime="0" Value="Silver" />
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="DGR_Border" Storyboard.TargetProperty="(Panel.Background).Color">
                                            <EasingColorKeyFrame KeyTime="0" Value="#FFBF00" />
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="MouseOver_Unfocused_Selected">
                                    <Storyboard>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="DGR_Rectangle" Storyboard.TargetProperty="(Shape.Stroke).Color">
                                            <EasingColorKeyFrame KeyTime="0" Value="Silver" />
                                        </ColorAnimationUsingKeyFrames>
                                        <ColorAnimationUsingKeyFrames Storyboard.TargetName="DGR_Border" Storyboard.TargetProperty="(Panel.Background).Color">
                                            <EasingColorKeyFrame KeyTime="0" Value="#FFBF00" />
                                        </ColorAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>

                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>

                        <Border>
                            <SelectiveScrollingGrid>
                                <SelectiveScrollingGrid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="*" />
                                </SelectiveScrollingGrid.ColumnDefinitions>
                                <SelectiveScrollingGrid.RowDefinitions>
                                    <RowDefinition Height="*" />
                                    <RowDefinition Height="Auto" />
                                </SelectiveScrollingGrid.RowDefinitions>
                                <Border x:Name="DGR_Border" Grid.Row="0" Grid.ColumnSpan="2" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                                        Background="{TemplateBinding Background}" Margin="{TemplateBinding Margin}" Opacity="0.4" CornerRadius="2" SnapsToDevicePixels="True">
                                </Border>
                                <Rectangle x:Name="DGR_Rectangle" Stroke="Transparent" StrokeThickness="1" Grid.Row="0" Grid.ColumnSpan="2" Grid.RowSpan="2"></Rectangle>
                                <DataGridCellsPresenter Grid.Column="1"
                                    ItemsPanel="{TemplateBinding ItemsPanel}"
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                <DataGridDetailsPresenter Grid.Column="1"
                                      Grid.Row="1"
                                      Visibility="{TemplateBinding DetailsVisibility}"
                                      SelectiveScrollingGrid.SelectiveScrollingOrientation="{Binding AreRowDetailsFrozen,ConverterParameter={x:Static SelectiveScrollingOrientation.Vertical},
                Converter={x:Static DataGrid.RowDetailsScrollingConverter}, 
                RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"/>
                                <DataGridRowHeader Grid.Row="0"
                               SelectiveScrollingGrid.SelectiveScrollingOrientation="Vertical"
                               Visibility="{Binding HeadersVisibility, 
                ConverterParameter={x:Static DataGridHeadersVisibility.Row}, 
                Converter={x:Static DataGrid.HeadersVisibilityConverter}, 
                RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}" />
                            </SelectiveScrollingGrid>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="RowHeaderCheckBox" TargetType="{x:Type CheckBox}">
        <Setter Property="VerticalAlignment" Value="Center"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Image x:Name="ImageToggleButton" HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalAlignment="{TemplateBinding VerticalAlignment}"
                               Width="{TemplateBinding Width}" Height="{TemplateBinding Height}" Stretch="Fill" Source="pack://application:,,,/CustomResourcesLibrary;component/Resources/列表-收起.png"></Image>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="ImageToggleButton" Property="Source" Value="pack://application:,,,/CustomResourcesLibrary;component/Resources/列表-展开.png"></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type DataGridRowHeader}">
        <Setter Property="Width" Value="42"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridRowHeader}">
                    <Border Padding="2" BorderThickness="0,0,1,0" BorderBrush="Black">
                        <CheckBox Width="12" Height="12" Style="{StaticResource RowHeaderCheckBox}"
                                          IsChecked="{Binding Path=DetailsVisibility, RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}, Converter={StaticResource VisibilityToNullableBooleanConverter}}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ColumnHeaderGripperStyle" TargetType="{x:Type Thumb}">
        <Setter Property="Width" Value="2" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Cursor" Value="SizeWE" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type DataGridColumnHeader}">
        <Setter Property="Background" Value="#63C0DF"/>
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="FontFamily" Value="微软雅黑"></Setter>
        <Setter Property="FontSize" Value="18"></Setter>
        <Setter Property="Foreground" Value="#333333"></Setter>
        <Setter Property="HorizontalContentAlignment" Value="Left"></Setter>
        <Setter Property="BorderBrush" Value="Black"></Setter>
        <Setter Property="BorderThickness" Value="0,0,1,0"></Setter>
        <Setter Property="Padding" Value="5"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridColumnHeader}">
                    <Grid>
                        <Border x:Name="columnHeaderBorder" Background="{TemplateBinding Background}" BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}" BorderBrush="{TemplateBinding BorderBrush}">
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        </Border>
                        <Thumb x:Name="PART_LeftHeaderGripper" HorizontalAlignment="Left" Style="{StaticResource ColumnHeaderGripperStyle}" />
                        <Thumb x:Name="PART_RightHeaderGripper" HorizontalAlignment="Right" Style="{StaticResource ColumnHeaderGripperStyle}" />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type DataGridColumnHeadersPresenter}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridColumnHeadersPresenter}">
                    <Grid>
                        <DataGridColumnHeader x:Name="PART_FillerColumnHeader" IsHitTestVisible="False" />
                        <ItemsPresenter />
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type DataGrid}">
        <Setter Property="Background" Value="Transparent"></Setter>
        <Setter Property="IsReadOnly" Value="True"></Setter>
        <Setter Property="AutoGenerateColumns" Value="False"></Setter>
        <Setter Property="CanUserAddRows" Value="False"></Setter>
        <Setter Property="RowHeaderWidth" Value="30"></Setter>
        <Setter Property="Margin" Value="15,20,15,0"></Setter>
        <Setter Property="BorderBrush" Value="Transparent"></Setter>
        <Setter Property="BorderThickness" Value="0"></Setter>
        <Setter Property="HorizontalGridLinesBrush" Value="Transparent"></Setter>
        <Setter Property="VerticalGridLinesBrush" Value="Black"></Setter>
        <Setter Property="AlternatingRowBackground" Value="Transparent"></Setter>
        <Setter Property="RowBackground" Value="#3F728D"></Setter>
        <Setter Property="AlternationCount" Value="2"></Setter>
        <Setter Property="RowDetailsVisibilityMode" Value="Collapsed"></Setter>
    </Style>

    <!--Expander-->
    <ControlTemplate x:Key="ExpanderToggleButton" TargetType="{x:Type ToggleButton}">
        <Border Background="Transparent">
            <Path x:Name="ExpanderArrow" HorizontalAlignment="Center" RenderTransformOrigin="0.5,0.5" VerticalAlignment="Center" Stroke="#999A9C" StrokeThickness="2" Data="M 0 0 L 10 7 L 20 0 M 0 6 L 10 13 L 20 6">
                <Path.RenderTransform>
                    <RotateTransform Angle="0"></RotateTransform>
                </Path.RenderTransform>
            </Path>
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="IsChecked" Value="True">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="ExpanderArrow" Storyboard.TargetProperty="(Path.RenderTransform).(RotateTransform.Angle)" To="-180" Duration="0:0:0.4"></DoubleAnimation>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="ExpanderArrow" Storyboard.TargetProperty="(Path.RenderTransform).(RotateTransform.Angle)" To="0" Duration="0:0:0.4"></DoubleAnimation>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter TargetName="ExpanderArrow" Property="Stroke" Value="#E88602"></Setter>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter TargetName="ExpanderArrow" Property="Stroke" Value="#DE7200"></Setter>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style TargetType="{x:Type Expander}">
        <Setter Property="IsExpanded" Value="True"></Setter>
        <Setter Property="Foreground" Value="#63C0DF"></Setter>
        <Setter Property="FontFamily" Value="微软雅黑"></Setter>
        <Setter Property="FontSize" Value="22"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="1*" />
                        </Grid.RowDefinitions>
                        <Grid Grid.Row="0">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="20" />
                            </Grid.ColumnDefinitions>
                            <ContentPresenter Grid.Column="0" ContentSource="Header" RecognizesAccessKey="True" />
                            <ToggleButton Grid.Column="1" OverridesDefaultStyle="True" Template="{StaticResource ExpanderToggleButton}"
                                              IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"></ToggleButton>
                        </Grid>
                        <ContentPresenter x:Name="ExpanderContent" Grid.Row="1">
                            <ContentPresenter.LayoutTransform>
                                <ScaleTransform ScaleY="0"></ScaleTransform>
                            </ContentPresenter.LayoutTransform>
                        </ContentPresenter>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="True">
                            <Trigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="ExpanderContent" Storyboard.TargetProperty="(ContentPresenter.LayoutTransform).(ScaleTransform.ScaleY)" To="1" Duration="0:0:0.4"></DoubleAnimation>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="ExpanderContent" Storyboard.TargetProperty="(ContentPresenter.LayoutTransform).(ScaleTransform.ScaleY)" To="0" Duration="0:0:0.4"></DoubleAnimation>
                                    </Storyboard>
                                </BeginStoryboard>
                            </Trigger.ExitActions>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--RadioButton-->
    <Style x:Key="TextRadioButtonStyle" TargetType="{x:Type RadioButton}">
        <Setter Property="FontFamily" Value="微软雅黑"></Setter>
        <Setter Property="FontSize" Value="16"></Setter>
        <Setter Property="Width" Value="90"></Setter>
        <Setter Property="Height" Value="25"></Setter>
        <Setter Property="Margin" Value="0,0,3,0"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Grid>
                        <Border x:Name="containerBorder" Background="#7D7D7D" Opacity="0.4"></Border>
                        <TextBlock x:Name="contentTextBlock" Text="{TemplateBinding Content}" Foreground="#BABABA" HorizontalAlignment="Center" VerticalAlignment="Center"></TextBlock>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="containerBorder" Property="Background" Value="#64C0DF"></Setter>
                            <Setter TargetName="containerBorder" Property="Opacity" Value="1.0"></Setter>
                            <Setter TargetName="contentTextBlock" Property="Foreground" Value="#333333"></Setter>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="containerBorder" Property="Background" Value="#64C0DF"></Setter>
                            <Setter TargetName="containerBorder" Property="Opacity" Value="1.0"></Setter>
                            <Setter TargetName="contentTextBlock" Property="Foreground" Value="#333333"></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--ScrollBar-->
    <Style x:Key="ScrollBarLineButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border x:Name="Border" Margin="1" BorderThickness="1" BorderBrush="Transparent" Background="Transparent">
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal" />
                                <VisualState x:Name="MouseOver" />
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Path x:Name="Arrow" HorizontalAlignment="Center" VerticalAlignment="Center" Data="{Binding Content, RelativeSource={RelativeSource TemplatedParent}}" Fill="#77666666"></Path>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ScrollBarPageButton" TargetType="{x:Type RepeatButton}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Border Background="Transparent" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ScrollBarThumb" TargetType="{x:Type Thumb}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Setter Property="IsTabStop" Value="false" />
        <Setter Property="Focusable" Value="false" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="VerticalScrollBar" TargetType="{x:Type ScrollBar}">
        <Grid>
            <Border Background="#535455" />
            <Track x:Name="PART_Track" IsDirectionReversed="true">
                <Track.DecreaseRepeatButton>
                    <RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="ScrollBar.PageUpCommand" />
                </Track.DecreaseRepeatButton>
                <Track.Thumb>
                    <Thumb Style="{StaticResource ScrollBarThumb}" Margin="0" BorderBrush="Transparent" Background="#61BFE1"></Thumb>
                </Track.Thumb>
                <Track.IncreaseRepeatButton>
                    <RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="ScrollBar.PageDownCommand" />
                </Track.IncreaseRepeatButton>
            </Track>
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="HorizontalScrollBar" TargetType="{x:Type ScrollBar}">
        <Grid>
            <Border Background="#535455" />
            <Track x:Name="PART_Track" IsDirectionReversed="False">
                <Track.DecreaseRepeatButton>
                    <RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="ScrollBar.PageLeftCommand" />
                </Track.DecreaseRepeatButton>
                <Track.Thumb>
                    <Thumb Style="{StaticResource ScrollBarThumb}" Margin="0" BorderBrush="Transparent" Background="#61BFE1"></Thumb>
                </Track.Thumb>
                <Track.IncreaseRepeatButton>
                    <RepeatButton Style="{StaticResource ScrollBarPageButton}" Command="ScrollBar.PageRightCommand" />
                </Track.IncreaseRepeatButton>
            </Track>
        </Grid>
    </ControlTemplate>

    <Style TargetType="{x:Type ScrollBar}">
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="true" />
        <Style.Triggers>
            <Trigger Property="Orientation" Value="Horizontal">
                <Setter Property="Width" Value="Auto" />
                <Setter Property="Height" Value="8" />
                <Setter Property="Template" Value="{StaticResource HorizontalScrollBar}" />
            </Trigger>
            <Trigger Property="Orientation" Value="Vertical">
                <Setter Property="Width" Value="8" />
                <Setter Property="Height" Value="Auto" />
                <Setter Property="Template" Value="{StaticResource VerticalScrollBar}" />
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <!--TabItem-->
    <Style TargetType="{x:Type TabItem}">
        <Setter Property="Foreground" Value="White"></Setter>
        <Setter Property="FontFamily" Value="Arial,pack://application:,,,/CustomResourcesLibrary;component/Fonts/#微软简老宋"></Setter>
        <Setter Property="FontSize" Value="18"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabItem}">
                    <Grid x:Name="Root">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*"></RowDefinition>
                            <RowDefinition Height="5"></RowDefinition>
                        </Grid.RowDefinitions>
                        <Border x:Name="Border" BorderThickness="0" BorderBrush="Transparent" Background="#FFFFFF" Opacity="0.22"></Border>
                        <StackPanel Orientation="Horizontal" Margin="12,2,2,2">
                            <ContentPresenter x:Name="ContentSite" VerticalAlignment="Center" HorizontalAlignment="Center" ContentSource="Header" Margin="0,0,2,0" RecognizesAccessKey="True" />
                        </StackPanel>
                        <Rectangle x:Name="Rectangle" Grid.Row="1" Fill="#004C66" Opacity="0.8"></Rectangle>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Panel.ZIndex" Value="100" />
                            <Setter TargetName="Border" Property="Background" Value="#FF9900"></Setter>
                            <Setter TargetName="Border" Property="Opacity" Value="0.7"></Setter>
                            <Setter TargetName="Rectangle" Property="Fill" Value="#FFA64D"></Setter>
                            <Setter TargetName="Rectangle" Property="Opacity" Value="0.8"></Setter>
                        </Trigger>
                        <Trigger SourceName="Root" Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="#4DD2FF"></Setter>
                            <Setter TargetName="Border" Property="Opacity" Value="0.4"></Setter>
                            <Setter TargetName="Rectangle" Property="Fill" Value="#00AFEA"></Setter>
                            <Setter TargetName="Rectangle" Property="Opacity" Value="1.0"></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!--TextBlock-->
    <Style x:Key="HeaderTextBlockStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="FontFamily" Value="微软雅黑"></Setter>
        <Setter Property="FontSize" Value="22"></Setter>
        <Setter Property="Foreground" Value="#64BFDF"></Setter>
    </Style>
    
    <Style x:Key="DigitalTextBlock" TargetType="{x:Type TextBlock}">
        <Setter Property="FontFamily" Value="pack://application:,,,/CustomResourcesLibrary;component/Fonts/#DS-Digital"></Setter>
        <Setter Property="FontSize" Value="45"></Setter>
        <Setter Property="Foreground" Value="White"></Setter>
        <Setter Property="HorizontalAlignment" Value="Center"></Setter>
        <Setter Property="VerticalAlignment" Value="Center"></Setter>
    </Style>
    
    <Style x:Key="IndicatorTextBlock" TargetType="{x:Type TextBlock}">
        <Setter Property="FontFamily" Value="微软雅黑"></Setter>
        <Setter Property="FontSize" Value="32"></Setter>
        <Setter Property="Foreground" Value="White"></Setter>
        <Setter Property="HorizontalAlignment" Value="Center"></Setter>
        <Setter Property="VerticalAlignment" Value="Center"></Setter>
        <Setter Property="Background">
            <Setter.Value>
                <LinearGradientBrush StartPoint="0,0.5" EndPoint="1,0.5">
                    <GradientStop Offset="0.0" Color="Transparent"></GradientStop>
                    <GradientStop Offset="0.1" Color="#1F7F0000"></GradientStop>
                    <GradientStop Offset="0.2" Color="#2F8F0000"></GradientStop>
                    <GradientStop Offset="0.3" Color="#3F9F0000"></GradientStop>
                    <GradientStop Offset="0.4" Color="#4FAF0000"></GradientStop>
                    <GradientStop Offset="0.5" Color="#5FBF0000"></GradientStop>
                    <GradientStop Offset="0.6" Color="#4FAF0000"></GradientStop>
                    <GradientStop Offset="0.7" Color="#3F9F0000"></GradientStop>
                    <GradientStop Offset="0.8" Color="#2F8F0000"></GradientStop>
                    <GradientStop Offset="0.9" Color="#1F7F0000"></GradientStop>
                    <GradientStop Offset="1.0" Color="Transparent"></GradientStop>
                </LinearGradientBrush>
            </Setter.Value>
        </Setter>
        <Setter Property="Effect">
            <Setter.Value>
                <DropShadowEffect Color="#D90000" BlurRadius="40" ShadowDepth="0"/>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style x:Key="OldSongTextBlock" TargetType="{x:Type TextBlock}">
        <Setter Property="FontFamily" Value="Arial,pack://application:,,,/CustomResourcesLibrary;component/Fonts/#微软简老宋"></Setter>
    </Style>
    
    <!--TextBox-->
    <Style x:Key="NoBorderTextBox" TargetType="{x:Type TextBox}">
        <Setter Property="FontFamily" Value="微软雅黑"></Setter>
        <Setter Property="FontSize" Value="20"></Setter>
        <Setter Property="Foreground" Value="White"></Setter>
        <Setter Property="CaretBrush" Value="White"></Setter>
        <Setter Property="BorderBrush" Value="Transparent"></Setter>
        <Setter Property="Background" Value="Transparent"></Setter>
        <Setter Property="BorderThickness" Value="0"></Setter>
        <Setter Property="VerticalAlignment" Value="Center"></Setter>
        <Setter Property="HorizontalAlignment" Value="Center"></Setter>
        <Setter Property="OverridesDefaultStyle" Value="True"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border Padding="2" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
                        <ScrollViewer x:Name="PART_ContentHost" Margin="0"></ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="DarkTextBoxStyle" TargetType="{x:Type TextBox}">
        <Setter Property="Foreground" Value="White"></Setter>
        <Setter Property="FontFamily" Value="微软雅黑"></Setter>
        <Setter Property="FontSize" Value="14"></Setter>
        <Setter Property="CaretBrush" Value="White"></Setter>
        <Setter Property="BorderBrush" Value="WhiteSmoke"></Setter>
        <Setter Property="Background" Value="Transparent"></Setter>
        <Setter Property="BorderThickness" Value="1"></Setter>
        <Setter Property="VerticalAlignment" Value="Center"></Setter>
        <Setter Property="HorizontalAlignment" Value="Center"></Setter>
        <Setter Property="OverridesDefaultStyle" Value="True"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBox}">
                    <Border Padding="2" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}">
                        <ScrollViewer x:Name="PART_ContentHost" Margin="0"></ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsReadOnly" Value="True">
                <Setter Property="Background" Value="#333333"></Setter>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" Value="White"></Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

</ResourceDictionary>